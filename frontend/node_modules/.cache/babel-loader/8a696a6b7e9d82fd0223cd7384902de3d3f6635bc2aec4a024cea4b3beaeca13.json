{"ast":null,"code":"var _jsxFileName = \"/Users/simonhopkins/Desktop/Personal/react/music-i-listen-to/src/PlaylistContainer.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport PlaylistEntry from \"./PlaylistEntry\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst client_id = '1b352e5ba35049b1918e0b310494107e';\nconst client_secret = 'b79d65aa4cca4e389c38ad01497bb981';\nasync function getPlaylistData(token, isNewToken) {\n  async function getParsedPlaylistData(playlistsData, authToken) {\n    return Promise.all(playlistsData.items.map(async playlist => {\n      //get tracks\n      const tracks = await fetch(playlist.tracks.href, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": `Bearer ${authToken}`\n        }\n      }).then(response => response.json()).then(data => {\n        return data.items.map(track => track.track);\n      });\n      const artists = tracks.map(track => {\n        return track.artists.map(artists => {\n          return {\n            artistName: artists.name,\n            artistUrl: artists.external_urls.spotify\n          };\n        });\n      }).flat();\n      let artistSet = new Set();\n      const filteredArtists = [];\n      for (const artist of artists) {\n        if (!artistSet.has(artist.artistName)) {\n          artistSet.add(artist.artistName);\n          filteredArtists.push(artist);\n        }\n      }\n      const playlistImg = playlist.images[0];\n      const playlistUrl = playlist.external_urls.spotify;\n      return {\n        imageUrl: playlistImg.url,\n        playlistUrl: playlistUrl,\n        artists: filteredArtists\n      };\n    })).then(data => {\n      //song data\n      return data;\n    });\n  } //end get getParsedPlaylistData\n\n  const numPlaylists = 3;\n  const url = `https://api.spotify.com/v1/users/simonlhopkins/playlists?limit=${numPlaylists}`;\n  //get the parsed data\n  return fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Authorization\": `Bearer ${token}`\n    }\n  }).then(response => response.json()).then(async data => {\n    const parsedData = await getParsedPlaylistData(data, token);\n    return parsedData;\n  }).catch(error => {\n    throw error;\n  });\n}\nfunction PlaylistContainer() {\n  _s();\n  const [accessToken, setAccessToken] = useState('');\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(null);\n  async function getAccessToken() {\n    const data = new URLSearchParams();\n    data.append(\"grant_type\", \"client_credentials\");\n    data.append(\"client_id\", client_id);\n    data.append(\"client_secret\", client_secret);\n    return fetch(\"https://accounts.spotify.com/api/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: data\n    }).then(response => {\n      console.log(response);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => data.access_token).catch(error => {\n      throw error;\n    });\n  }\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const token = await getAccessToken();\n        setAccessToken(token);\n        if (localStorage.getItem(\"cachedPlaylistData\")) {\n          const data = JSON.parse(localStorage.getItem(\"cachedPlaylistData\"));\n          setData(data);\n        } else {\n          const data = await getPlaylistData(token);\n          localStorage.setItem(\"cachedPlaylistData\", JSON.stringify(data));\n          setData(data);\n        }\n      } catch (error) {\n        setError(error);\n        return;\n      }\n    };\n    fetchData();\n  }, []);\n  const children = data.map((playlistsData, index) => {\n    return /*#__PURE__*/_jsxDEV(PlaylistEntry, {\n      imageUrl: playlistsData.imageUrl,\n      artists: playlistsData.artists,\n      playlistUrl: playlistsData.playlistUrl\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(StyledPlaylistContainer, {\n      children: children.length > 0 && children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error.toString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true);\n}\n_s(PlaylistContainer, \"wy8tsdthGPF6t7EyD82ES+adbPQ=\");\n_c = PlaylistContainer;\nconst StyledPlaylistContainer = styled.div`\ndisplay: grid;\ngrid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\nmax-width: 100%;\n`;\n_c2 = StyledPlaylistContainer;\nexport default PlaylistContainer;\nvar _c, _c2;\n$RefreshReg$(_c, \"PlaylistContainer\");\n$RefreshReg$(_c2, \"StyledPlaylistContainer\");","map":{"version":3,"names":["useEffect","useState","styled","PlaylistEntry","jsxDEV","_jsxDEV","Fragment","_Fragment","client_id","client_secret","getPlaylistData","token","isNewToken","getParsedPlaylistData","playlistsData","authToken","Promise","all","items","map","playlist","tracks","fetch","href","method","headers","then","response","json","data","track","artists","artistName","name","artistUrl","external_urls","spotify","flat","artistSet","Set","filteredArtists","artist","has","add","push","playlistImg","images","playlistUrl","imageUrl","url","numPlaylists","parsedData","catch","error","PlaylistContainer","_s","accessToken","setAccessToken","setData","setError","getAccessToken","URLSearchParams","append","body","console","log","ok","Error","status","access_token","fetchData","localStorage","getItem","JSON","parse","setItem","stringify","children","index","fileName","_jsxFileName","lineNumber","columnNumber","StyledPlaylistContainer","length","toString","_c","div","_c2","$RefreshReg$"],"sources":["/Users/simonhopkins/Desktop/Personal/react/music-i-listen-to/src/PlaylistContainer.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport PlaylistEntry from \"./PlaylistEntry\";\n\n\nconst client_id = '1b352e5ba35049b1918e0b310494107e';\nconst client_secret = 'b79d65aa4cca4e389c38ad01497bb981';\n\n\n\nasync function getPlaylistData(token, isNewToken) {\n    async function getParsedPlaylistData(playlistsData, authToken) {\n      return Promise.all(playlistsData.items.map(async (playlist) => {\n        //get tracks\n        const tracks = await fetch(playlist.tracks.href, {\n          method: \"GET\",\n          headers: {\n            \"Authorization\": `Bearer ${authToken}`\n          }\n        })\n        .then(response => response.json())\n        .then(data => {\n          return data.items.map(track => track.track);\n        })\n        const artists = tracks.map((track) => {\n          return track.artists.map(artists => {\n            return{\n              artistName: artists.name,\n              artistUrl: artists.external_urls.spotify\n            }\n          });\n        }).flat();\n        let artistSet = new Set();\n        const filteredArtists = [];\n        for(const artist of artists){\n          if(!artistSet.has(artist.artistName)){\n            artistSet.add(artist.artistName);\n            filteredArtists.push(artist);\n          }\n        }\n  \n        const playlistImg = playlist.images[0];\n        const playlistUrl = playlist.external_urls.spotify;\n        return {\n          imageUrl: playlistImg.url,\n          playlistUrl: playlistUrl,\n          artists: filteredArtists\n        };\n      })).then(data => {\n        //song data\n        return data;\n      });\n    } //end get getParsedPlaylistData\n    \n    const numPlaylists = 3;\n    const url = `https://api.spotify.com/v1/users/simonlhopkins/playlists?limit=${numPlaylists}`;\n    //get the parsed data\n    return fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    })\n    .then(response => response.json())\n    .then(async (data) => {\n      const parsedData = await getParsedPlaylistData(data, token);\n      return parsedData;\n    })\n    .catch(error => {\n        throw(error)\n    });\n  }\n\nfunction PlaylistContainer(){\n    const [accessToken, setAccessToken] = useState('');\n    const [data, setData] = useState([]);\n    const [error, setError] = useState(null);\n\n    async function getAccessToken() {\n        const data = new URLSearchParams();\n        data.append(\"grant_type\", \"client_credentials\");\n        data.append(\"client_id\", client_id);\n        data.append(\"client_secret\", client_secret);\n        return fetch(\"https://accounts.spotify.com/api/token\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          },\n          body: data\n      \n        }).then(response => {\n            console.log(response);\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(data => data.access_token)\n        .catch(error => {\n            throw error;\n        });\n    \n    }\n\n    useEffect(()=>{\n        const fetchData = async ()=>{\n            try{\n                const token = await getAccessToken();\n                setAccessToken(token);\n                if (localStorage.getItem(\"cachedPlaylistData\")) {\n                    const data = JSON.parse(localStorage.getItem(\"cachedPlaylistData\"));\n                    setData(data);\n                    \n                }else{\n                    const data = await getPlaylistData(token);\n                    localStorage.setItem(\"cachedPlaylistData\", JSON.stringify(data));\n                    setData(data);\n                }\n                \n            }\n            catch(error){\n                setError(error);\n                return;\n            }\n            \n        }\n        fetchData();\n    }, [])\n\n    const children = data.map((playlistsData, index)=>{\n        return (\n            <PlaylistEntry \n                key = {index}\n                imageUrl = {playlistsData.imageUrl}\n                artists = {playlistsData.artists}\n                playlistUrl = {playlistsData.playlistUrl} \n                />\n        )\n    });\n    return(\n        <>\n        <StyledPlaylistContainer>\n            {children.length>0 && children}\n        </StyledPlaylistContainer>\n        {error && <p>Error: {error.toString()}</p>}\n        </>\n    )\n}\n\nconst StyledPlaylistContainer = styled.div`\ndisplay: grid;\ngrid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\nmax-width: 100%;\n`\n\nexport default PlaylistContainer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
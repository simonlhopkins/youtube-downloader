{"ast":null,"code":"var _jsxFileName = \"/Users/simonhopkins/Desktop/Personal/react/music-i-listen-to/src/PlaylistContainer.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport PlaylistEntry from \"./PlaylistEntry\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client_id = '1b352e5ba35049b1918e0b310494107e';\nconst client_secret = 'b79d65aa4cca4e389c38ad01497bb981';\nasync function getAccessToken() {\n  const data = new URLSearchParams();\n  data.append(\"grant_type\", \"client_credentials\");\n  data.append(\"client_id\", client_id);\n  data.append(\"client_secret\", client_secret);\n  return fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: data\n  }).then(response => response.json()).then(data => {\n    console.log(\"setting access token\");\n    // setAccessToken(data.access_token);\n    return data.access_token;\n  }).catch(error => {\n    return '';\n  });\n}\nasync function getPlaylistData(token, isNewToken) {\n  if (localStorage.getItem(\"cachedPlaylistData\") && !isNewToken) {\n    return JSON.parse(localStorage.getItem(\"cachedPlaylistData\"));\n  }\n  console.log(\"fetching new playlist data\");\n  async function getParsedPlaylistData(playlistsData, authToken) {\n    return Promise.all(playlistsData.items.map(async playlist => {\n      //get tracks\n      const tracks = await fetch(playlist.tracks.href, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": `Bearer ${authToken}`\n        }\n      }).then(response => response.json()).then(data => {\n        return data.items.map(track => track.track);\n      });\n      const artists = tracks.map(track => {\n        return track.artists.map(artists => {\n          return {\n            artistName: artists.name,\n            artistUrl: artists.external_urls.spotify\n          };\n        });\n      }).flat();\n      let artistSet = new Set();\n      const filteredArtists = [];\n      for (const artist of artists) {\n        if (!artistSet.has(artist.artistName)) {\n          artistSet.add(artist.artistName);\n          filteredArtists.push(artist);\n        }\n      }\n      const playlistImg = playlist.images[0];\n      const playlistUrl = playlist.external_urls.spotify;\n      return {\n        imageUrl: playlistImg.url,\n        playlistUrl: playlistUrl,\n        artists: filteredArtists\n      };\n    })).then(data => {\n      //song data\n      return data;\n    });\n  } //end get getParsedPlaylistData\n\n  const numPlaylists = 3;\n  const url = `https://api.spotify.com/v1/users/simonlhopkins/playlists?limit=${numPlaylists}`;\n  //get the parsed data\n  return fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Authorization\": `Bearer ${token}`\n    }\n  }).then(response => response.json()).then(async data => {\n    const parsedData = await getParsedPlaylistData(data, token);\n    localStorage.setItem(\"cachedPlaylistData\", JSON.stringify(parsedData));\n    return parsedData;\n  }).catch(error => console.error('Error:', error));\n}\nfunction PlaylistContainer() {\n  _s();\n  const [accessToken, setAccessToken] = useState('');\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const token = await getAccessToken();\n      setAccessToken(token);\n      const data = await getPlaylistData(token, true);\n      setData(data);\n    };\n    fetchData();\n  }, []);\n  const children = data.map((playlistsData, index) => {\n    return /*#__PURE__*/_jsxDEV(PlaylistEntry, {\n      imageUrl: playlistsData.imageUrl,\n      artists: playlistsData.artists,\n      playlistUrl: playlistsData.playlistUrl\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this);\n  });\n  console.log(\"render playlist container\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"access token is: \", accessToken == '' ? \"loading\" : accessToken]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n}\n_s(PlaylistContainer, \"2H3voZvvZfHd1B1dN+x2sGdaMew=\");\n_c = PlaylistContainer;\nexport default PlaylistContainer;\nvar _c;\n$RefreshReg$(_c, \"PlaylistContainer\");","map":{"version":3,"names":["useEffect","useState","PlaylistEntry","jsxDEV","_jsxDEV","client_id","client_secret","getAccessToken","data","URLSearchParams","append","fetch","method","headers","body","then","response","json","console","log","access_token","catch","error","getPlaylistData","token","isNewToken","localStorage","getItem","JSON","parse","getParsedPlaylistData","playlistsData","authToken","Promise","all","items","map","playlist","tracks","href","track","artists","artistName","name","artistUrl","external_urls","spotify","flat","artistSet","Set","filteredArtists","artist","has","add","push","playlistImg","images","playlistUrl","imageUrl","url","numPlaylists","parsedData","setItem","stringify","PlaylistContainer","_s","accessToken","setAccessToken","setData","fetchData","children","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/simonhopkins/Desktop/Personal/react/music-i-listen-to/src/PlaylistContainer.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport PlaylistEntry from \"./PlaylistEntry\";\n\n\nconst client_id = '1b352e5ba35049b1918e0b310494107e';\nconst client_secret = 'b79d65aa4cca4e389c38ad01497bb981';\n\nasync function getAccessToken() {\n\n    \n  \n    const data = new URLSearchParams();\n    data.append(\"grant_type\", \"client_credentials\");\n    data.append(\"client_id\", client_id);\n    data.append(\"client_secret\", client_secret);\n    return fetch(\"https://accounts.spotify.com/api/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: data\n  \n    }).then(response => response.json())\n      .then(data => {\n        console.log(\"setting access token\");\n        // setAccessToken(data.access_token);\n        return data.access_token;\n  \n      }).catch(error => {\n        return '';\n      });\n  \n}\n\nasync function getPlaylistData(token, isNewToken) {\n    if (localStorage.getItem(\"cachedPlaylistData\") && !isNewToken) {\n      return JSON.parse(localStorage.getItem(\"cachedPlaylistData\"));\n    }\n    console.log(\"fetching new playlist data\");\n    async function getParsedPlaylistData(playlistsData, authToken) {\n  \n      return Promise.all(playlistsData.items.map(async (playlist) => {\n        //get tracks\n        const tracks = await fetch(playlist.tracks.href, {\n          method: \"GET\",\n          headers: {\n            \"Authorization\": `Bearer ${authToken}`\n          }\n        })\n        .then(response => response.json())\n        .then(data => {\n          return data.items.map(track => track.track);\n        })\n        const artists = tracks.map((track) => {\n          return track.artists.map(artists => {\n            return{\n              artistName: artists.name,\n              artistUrl: artists.external_urls.spotify\n            }\n          });\n        }).flat();\n        let artistSet = new Set();\n        const filteredArtists = [];\n        for(const artist of artists){\n          if(!artistSet.has(artist.artistName)){\n            artistSet.add(artist.artistName);\n            filteredArtists.push(artist);\n          }\n        }\n  \n        const playlistImg = playlist.images[0];\n        const playlistUrl = playlist.external_urls.spotify;\n        return {\n          imageUrl: playlistImg.url,\n          playlistUrl: playlistUrl,\n          artists: filteredArtists\n        };\n      })).then(data => {\n        //song data\n        return data;\n      });\n    } //end get getParsedPlaylistData\n    \n    const numPlaylists = 3;\n    const url = `https://api.spotify.com/v1/users/simonlhopkins/playlists?limit=${numPlaylists}`;\n    //get the parsed data\n    return fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    })\n    .then(response => response.json())\n    .then(async (data) => {\n      const parsedData = await getParsedPlaylistData(data, token);\n      localStorage.setItem(\"cachedPlaylistData\", JSON.stringify(parsedData));\n      return parsedData;\n    })\n    .catch(error => console.error('Error:', error));\n  }\n\nfunction PlaylistContainer(){\n    const [accessToken, setAccessToken] = useState('');\n    const [data, setData] = useState([]);\n\n    useEffect(()=>{\n        const fetchData = async ()=>{\n            const token = await getAccessToken()\n            setAccessToken(token);\n            const data = await getPlaylistData(token, true);\n            setData(data);\n        }\n        fetchData();\n    }, [])\n\n    \n    const children = data.map((playlistsData, index)=>{\n        return (\n            <PlaylistEntry \n            key = {index}\n            imageUrl = {playlistsData.imageUrl}\n            artists = {playlistsData.artists}\n            playlistUrl = {playlistsData.playlistUrl} \n            />\n        )\n    });\n\n    console.log(\"render playlist container\");\n    return(\n        <div>\n            <p>access token is: {accessToken == ''?\"loading\":accessToken}</p>\n            {children}\n        </div>\n    )\n}\n\nexport default PlaylistContainer;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG5C,MAAMC,SAAS,GAAG,kCAAkC;AACpD,MAAMC,aAAa,GAAG,kCAAkC;AAExD,eAAeC,cAAcA,CAAA,EAAG;EAI5B,MAAMC,IAAI,GAAG,IAAIC,eAAe,CAAC,CAAC;EAClCD,IAAI,CAACE,MAAM,CAAC,YAAY,EAAE,oBAAoB,CAAC;EAC/CF,IAAI,CAACE,MAAM,CAAC,WAAW,EAAEL,SAAS,CAAC;EACnCG,IAAI,CAACE,MAAM,CAAC,eAAe,EAAEJ,aAAa,CAAC;EAC3C,OAAOK,KAAK,CAAC,wCAAwC,EAAE;IACrDC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEN;EAER,CAAC,CAAC,CAACO,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACP,IAAI,IAAI;IACZU,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC;IACA,OAAOX,IAAI,CAACY,YAAY;EAE1B,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAI;IAChB,OAAO,EAAE;EACX,CAAC,CAAC;AAER;AAEA,eAAeC,eAAeA,CAACC,KAAK,EAAEC,UAAU,EAAE;EAC9C,IAAIC,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAACF,UAAU,EAAE;IAC7D,OAAOG,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC,CAAC;EAC/D;EACAT,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;EACzC,eAAeW,qBAAqBA,CAACC,aAAa,EAAEC,SAAS,EAAE;IAE7D,OAAOC,OAAO,CAACC,GAAG,CAACH,aAAa,CAACI,KAAK,CAACC,GAAG,CAAC,MAAOC,QAAQ,IAAK;MAC7D;MACA,MAAMC,MAAM,GAAG,MAAM3B,KAAK,CAAC0B,QAAQ,CAACC,MAAM,CAACC,IAAI,EAAE;QAC/C3B,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,eAAe,EAAG,UAASmB,SAAU;QACvC;MACF,CAAC,CAAC,CACDjB,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACP,IAAI,IAAI;QACZ,OAAOA,IAAI,CAAC2B,KAAK,CAACC,GAAG,CAACI,KAAK,IAAIA,KAAK,CAACA,KAAK,CAAC;MAC7C,CAAC,CAAC;MACF,MAAMC,OAAO,GAAGH,MAAM,CAACF,GAAG,CAAEI,KAAK,IAAK;QACpC,OAAOA,KAAK,CAACC,OAAO,CAACL,GAAG,CAACK,OAAO,IAAI;UAClC,OAAM;YACJC,UAAU,EAAED,OAAO,CAACE,IAAI;YACxBC,SAAS,EAAEH,OAAO,CAACI,aAAa,CAACC;UACnC,CAAC;QACH,CAAC,CAAC;MACJ,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;MACT,IAAIC,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;MACzB,MAAMC,eAAe,GAAG,EAAE;MAC1B,KAAI,MAAMC,MAAM,IAAIV,OAAO,EAAC;QAC1B,IAAG,CAACO,SAAS,CAACI,GAAG,CAACD,MAAM,CAACT,UAAU,CAAC,EAAC;UACnCM,SAAS,CAACK,GAAG,CAACF,MAAM,CAACT,UAAU,CAAC;UAChCQ,eAAe,CAACI,IAAI,CAACH,MAAM,CAAC;QAC9B;MACF;MAEA,MAAMI,WAAW,GAAGlB,QAAQ,CAACmB,MAAM,CAAC,CAAC,CAAC;MACtC,MAAMC,WAAW,GAAGpB,QAAQ,CAACQ,aAAa,CAACC,OAAO;MAClD,OAAO;QACLY,QAAQ,EAAEH,WAAW,CAACI,GAAG;QACzBF,WAAW,EAAEA,WAAW;QACxBhB,OAAO,EAAES;MACX,CAAC;IACH,CAAC,CAAC,CAAC,CAACnC,IAAI,CAACP,IAAI,IAAI;MACf;MACA,OAAOA,IAAI;IACb,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF,MAAMoD,YAAY,GAAG,CAAC;EACtB,MAAMD,GAAG,GAAI,kEAAiEC,YAAa,EAAC;EAC5F;EACA,OAAOjD,KAAK,CAACgD,GAAG,EAAE;IAChB/C,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,eAAe,EAAG,UAASW,KAAM;IACnC;EACF,CAAC,CAAC,CACDT,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAAC,MAAOP,IAAI,IAAK;IACpB,MAAMqD,UAAU,GAAG,MAAM/B,qBAAqB,CAACtB,IAAI,EAAEgB,KAAK,CAAC;IAC3DE,YAAY,CAACoC,OAAO,CAAC,oBAAoB,EAAElC,IAAI,CAACmC,SAAS,CAACF,UAAU,CAAC,CAAC;IACtE,OAAOA,UAAU;EACnB,CAAC,CAAC,CACDxC,KAAK,CAACC,KAAK,IAAIJ,OAAO,CAACI,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC,CAAC;AACjD;AAEF,SAAS0C,iBAAiBA,CAAA,EAAE;EAAAC,EAAA;EACxB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGlE,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACO,IAAI,EAAE4D,OAAO,CAAC,GAAGnE,QAAQ,CAAC,EAAE,CAAC;EAEpCD,SAAS,CAAC,MAAI;IACV,MAAMqE,SAAS,GAAG,MAAAA,CAAA,KAAU;MACxB,MAAM7C,KAAK,GAAG,MAAMjB,cAAc,CAAC,CAAC;MACpC4D,cAAc,CAAC3C,KAAK,CAAC;MACrB,MAAMhB,IAAI,GAAG,MAAMe,eAAe,CAACC,KAAK,EAAE,IAAI,CAAC;MAC/C4C,OAAO,CAAC5D,IAAI,CAAC;IACjB,CAAC;IACD6D,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAGN,MAAMC,QAAQ,GAAG9D,IAAI,CAAC4B,GAAG,CAAC,CAACL,aAAa,EAAEwC,KAAK,KAAG;IAC9C,oBACInE,OAAA,CAACF,aAAa;MAEdwD,QAAQ,EAAI3B,aAAa,CAAC2B,QAAS;MACnCjB,OAAO,EAAIV,aAAa,CAACU,OAAQ;MACjCgB,WAAW,EAAI1B,aAAa,CAAC0B;IAAY,GAHlCc,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIX,CAAC;EAEV,CAAC,CAAC;EAEFzD,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;EACxC,oBACIf,OAAA;IAAAkE,QAAA,gBACIlE,OAAA;MAAAkE,QAAA,GAAG,mBAAiB,EAACJ,WAAW,IAAI,EAAE,GAAC,SAAS,GAACA,WAAW;IAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAChEL,QAAQ;EAAA;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd;AAACV,EAAA,CAjCQD,iBAAiB;AAAAY,EAAA,GAAjBZ,iBAAiB;AAmC1B,eAAeA,iBAAiB;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
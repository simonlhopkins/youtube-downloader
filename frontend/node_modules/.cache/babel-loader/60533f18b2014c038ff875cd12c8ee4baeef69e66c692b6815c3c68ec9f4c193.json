{"ast":null,"code":"var _jsxFileName = \"/Users/simonhopkins/Desktop/Personal/react/music-i-listen-to/frontend/src/Components/YoutubeDL.jsx\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst axios = require('axios');\nexport const YoutubeDL = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isConverting, setIsConverting] = useState(false);\n  const [convertFormat, setConvertFormat] = useState(\"m4a\");\n  const [downloadReady, setDownloadReady] = useState(false);\n  const [thumbnailURL, setThumbnailURL] = useState(null);\n  const textInput = useRef(null);\n  function validateYouTubeUrl(url) {\n    if (url != undefined || url != '') {\n      var regExp = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|\\&v=|\\?v=)([^#\\&\\?]*).*/;\n      var match = url.match(regExp);\n      if (match && match[2].length == 11) {\n        // Do anything for being valid\n        // if need to change the url to embed url then use below line\n        $('#ytplayerSide').attr('src', 'https://www.youtube.com/embed/' + match[2] + '?autoplay=0');\n      } else {\n        // Do anything for not being valid\n      }\n    }\n  }\n  const onInputChange = e => {\n    console.log(e.target.value);\n    if (!validateYouTubeUrl(e.target.value)) {\n      console.log(\"invalid url\");\n      return;\n    }\n    fetch(`http://localhost:3001/thumbnail?url=${e.target.value}`).then(response => {\n      if (response.ok) {\n        response.json().then(json => {\n          console.log(json.url);\n          setThumbnailURL(json.url);\n        });\n      } else {\n        setThumbnailURL(null);\n        response.json().then(json => {\n          console.log(json.error);\n        });\n      }\n    }).catch(error => {\n      console.error(error.toString());\n      setThumbnailURL(null);\n      setError(error.toString());\n    });\n  };\n  const convertYT = async () => {\n    const text = textInput.current.value;\n    setIsConverting(true);\n    fetch('http://localhost:3001/convertYoutube', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      mode: 'cors',\n      body: JSON.stringify({\n        url: text,\n        format: convertFormat\n      })\n    }).then(response => {\n      if (response.ok) {\n        response.json().then(json => console.log(json.message));\n        setDownloadReady(true);\n      } else {\n        response.json().then(json => {\n          setDownloadReady(false);\n          setError(json.error);\n        });\n      }\n    }).catch(error => {\n      setDownloadReady(false);\n      setError(error.toString());\n    }).finally(() => {\n      setIsConverting(false);\n    });\n  };\n  const formatButtons = [\"m4a\", \"mp4\"].map(format => {\n    return /*#__PURE__*/_jsxDEV(FormatButton, {\n      onClick: () => {\n        setConvertFormat(format);\n      },\n      format: format,\n      active: convertFormat == format\n    }, format, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 16\n    }, this);\n  });\n  const downloadVideo = async () => {\n    fetch('http://localhost:3001/download').then(response => {\n      if (response.ok) {\n        // Extract the file name from the response headers\n        const contentDisposition = response.headers.get('content-disposition');\n        const filenameMatch = contentDisposition.match(/filename=\"(.+?)\"/);\n        const suggestedFileName = filenameMatch ? filenameMatch[1] : 'downloaded-file.txt';\n        return response.blob().then(blob => ({\n          blob,\n          suggestedFileName\n        }));\n      } else {\n        setError(\"Download request failed\");\n        throw new Error('Download request failed');\n      }\n    }).then(({\n      blob,\n      suggestedFileName\n    }) => {\n      // Create a blob URL for the downloaded file and trigger the download\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = suggestedFileName; // Set the suggested file name\n      a.style.display = 'none';\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n    }).catch(error => {\n      // Handle the error locally without redirecting\n      console.error('Download error:', error);\n      setError(error.toString());\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(YoutubeDLContainer, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"youtube dl\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"https://www.youtube.com/watch?v=hRFUZBXOWZI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: onInputChange,\n      ref: textInput,\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormatContainer, {\n      children: formatButtons\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this), thumbnailURL && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: thumbnailURL\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: convertYT,\n      children: \"convert yt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this), downloadReady && /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isConverting,\n      onClick: downloadVideo,\n      children: [isConverting ? \"loading...\" : \"DOWNLOAD\", \"!!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 31\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error.toString()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 9\n  }, this);\n};\n_s(YoutubeDL, \"oVY4/pVHAwbTHAalL9R9zhWLYtc=\");\n_c = YoutubeDL;\nfunction FormatButton({\n  onClick,\n  format,\n  active\n}) {\n  return /*#__PURE__*/_jsxDEV(StyledFormatButton, {\n    $active: active,\n    onClick: onClick,\n    children: format\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 9\n  }, this);\n}\n_c2 = FormatButton;\nconst YoutubeDLContainer = styled.div`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n`;\n_c3 = YoutubeDLContainer;\nconst FormatContainer = styled.div`\n    \n    display: flex;\n    justify-content: center;\n\n`;\n_c4 = FormatContainer;\nconst StyledFormatButton = styled.button`\n    background-color: ${props => props.$active ? \"red\" : \"white\"};\n    padding: 0 1rem;\n\n`;\n_c5 = StyledFormatButton;\nexport default YoutubeDL;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"YoutubeDL\");\n$RefreshReg$(_c2, \"FormatButton\");\n$RefreshReg$(_c3, \"YoutubeDLContainer\");\n$RefreshReg$(_c4, \"FormatContainer\");\n$RefreshReg$(_c5, \"StyledFormatButton\");","map":{"version":3,"names":["useRef","useState","styled","jsxDEV","_jsxDEV","axios","require","YoutubeDL","_s","error","setError","isConverting","setIsConverting","convertFormat","setConvertFormat","downloadReady","setDownloadReady","thumbnailURL","setThumbnailURL","textInput","validateYouTubeUrl","url","undefined","regExp","match","length","$","attr","onInputChange","e","console","log","target","value","fetch","then","response","ok","json","catch","toString","convertYT","text","current","method","headers","mode","body","JSON","stringify","format","message","finally","formatButtons","map","FormatButton","onClick","active","fileName","_jsxFileName","lineNumber","columnNumber","downloadVideo","contentDisposition","get","filenameMatch","suggestedFileName","blob","Error","window","URL","createObjectURL","a","document","createElement","href","download","style","display","appendChild","click","revokeObjectURL","YoutubeDLContainer","children","onChange","ref","type","FormatContainer","src","disabled","_c","StyledFormatButton","$active","_c2","div","_c3","_c4","button","props","_c5","$RefreshReg$"],"sources":["/Users/simonhopkins/Desktop/Personal/react/music-i-listen-to/frontend/src/Components/YoutubeDL.jsx"],"sourcesContent":["\nimport { useRef, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst axios = require('axios');\n\nexport const YoutubeDL = () => {\n\n    const [error, setError] = useState(null);\n    const [isConverting, setIsConverting] = useState(false);\n    const [convertFormat, setConvertFormat] = useState(\"m4a\");\n    const [downloadReady, setDownloadReady] = useState(false);\n    const [thumbnailURL, setThumbnailURL] = useState(null);\n    const textInput = useRef(null);\n    \n    function validateYouTubeUrl(url)\n    {\n        if (url != undefined || url != '') {\n            var regExp = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|\\&v=|\\?v=)([^#\\&\\?]*).*/;\n            var match = url.match(regExp);\n            if (match && match[2].length == 11) {\n                // Do anything for being valid\n                // if need to change the url to embed url then use below line\n                $('#ytplayerSide').attr('src', 'https://www.youtube.com/embed/' + match[2] + '?autoplay=0');\n            }\n            else {\n                // Do anything for not being valid\n            }\n        }\n            \n    }\n\n    const onInputChange = (e)=>{\n        console.log(e.target.value);\n        if(!validateYouTubeUrl(e.target.value)){\n            console.log(\"invalid url\");\n            return;\n        }\n        fetch(`http://localhost:3001/thumbnail?url=${e.target.value}`)\n        .then(response=>{\n            if(response.ok){\n                response.json().then(json=>{\n                    console.log(json.url);\n                    setThumbnailURL(json.url);\n                })\n            }else{\n                setThumbnailURL(null);\n                response.json().then(json=>{\n                    console.log(json.error)\n                });\n            }\n        }).catch((error)=>{\n            console.error(error.toString());\n            setThumbnailURL(null);\n            setError(error.toString());\n        })\n    }\n\n    const convertYT = async ()=>{\n        const text = textInput.current.value;\n        setIsConverting(true);\n        fetch('http://localhost:3001/convertYoutube', \n        {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n\n            mode:'cors',\n            body: JSON.stringify({\n                url: text,\n                format: convertFormat\n            })\n        })\n        .then(response => {\n            if(response.ok){\n                response.json().then(json=>console.log(json.message));\n                setDownloadReady(true);\n            }else{\n                response.json().then(json=>{\n                    setDownloadReady(false);\n                    setError(json.error);\n                });\n            }\n        })\n        .catch(error=>{\n            setDownloadReady(false);\n            setError(error.toString());\n        }).finally(()=>{\n            setIsConverting(false);\n        })\n        \n            \n        \n        \n        \n    }\n\n    const formatButtons = [\"m4a\", \"mp4\"].map(format=>{\n        return <FormatButton \n        onClick = {()=>{setConvertFormat(format)}}\n        format = {format}\n        key = {format}\n        active= {convertFormat == format}\n        />\n    })\n    const downloadVideo = async ()=>{\n\n        fetch('http://localhost:3001/download')\n        .then((response) => {\n            if (response.ok) {\n                // Extract the file name from the response headers\n                const contentDisposition = response.headers.get('content-disposition');\n                const filenameMatch = contentDisposition.match(/filename=\"(.+?)\"/);\n                const suggestedFileName = filenameMatch ? filenameMatch[1] : 'downloaded-file.txt';\n\n                return response.blob().then(blob => ({ blob, suggestedFileName }));\n            } else {\n                setError(\"Download request failed\");\n                throw new Error('Download request failed');\n            }\n        })\n        .then(({ blob, suggestedFileName }) => {\n            // Create a blob URL for the downloaded file and trigger the download\n            const url = window.URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = suggestedFileName; // Set the suggested file name\n            a.style.display = 'none';\n            document.body.appendChild(a);\n            a.click();\n            window.URL.revokeObjectURL(url);\n          })\n          .catch((error) => {\n            // Handle the error locally without redirecting\n            console.error('Download error:', error);\n            setError(error.toString());\n          });\n    }\n    return(\n        \n        <YoutubeDLContainer>\n            <h1>youtube dl</h1>\n            <p>https://www.youtube.com/watch?v=hRFUZBXOWZI</p>\n            <input onChange = {onInputChange} ref = {textInput} type=\"text\"/>\n            <FormatContainer>\n                {formatButtons}\n            </FormatContainer>\n            {thumbnailURL && <img src = {thumbnailURL}></img>}\n            <button onClick={convertYT}>convert yt</button>\n            {downloadReady && <button disabled={isConverting} onClick={downloadVideo}>{isConverting?\"loading...\":\"DOWNLOAD\"}!!</button>}\n            {error && (<p>{error.toString()}</p>)}\n        </YoutubeDLContainer>\n        \n        \n    )\n}\n\nfunction FormatButton({onClick, format, active}){\n    return (\n        <StyledFormatButton\n            $active = {active}\n            onClick = {onClick}\n        >{format}</StyledFormatButton>\n    )\n}\n\nconst YoutubeDLContainer = styled.div`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n`\nconst FormatContainer = styled.div`\n    \n    display: flex;\n    justify-content: center;\n\n`\n\nconst StyledFormatButton = styled.button`\n    background-color: ${props => props.$active?\"red\":\"white\"};\n    padding: 0 1rem;\n\n`\nexport default YoutubeDL;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
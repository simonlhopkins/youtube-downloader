{"ast":null,"code":"var _jsxFileName = \"/Users/simonhopkins/Desktop/Personal/react/music-i-listen-to/src/PlaylistContainer.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport PlaylistEntry from \"./PlaylistEntry\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst client_id = '1b352e5ba35049b1918e0b310494107e';\nconst client_secret = 'b79d65aa4cca4e389c38ad01497bb981';\nasync function getPlaylistData(token, isNewToken) {\n  if (localStorage.getItem(\"cachedPlaylistData\") && !isNewToken) {\n    return JSON.parse(localStorage.getItem(\"cachedPlaylistData\"));\n  }\n  console.log(\"fetching new playlist data\");\n  async function getParsedPlaylistData(playlistsData, authToken) {\n    return Promise.all(playlistsData.items.map(async playlist => {\n      //get tracks\n      const tracks = await fetch(playlist.tracks.href, {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": `Bearer ${authToken}`\n        }\n      }).then(response => response.json()).then(data => {\n        return data.items.map(track => track.track);\n      });\n      const artists = tracks.map(track => {\n        return track.artists.map(artists => {\n          return {\n            artistName: artists.name,\n            artistUrl: artists.external_urls.spotify\n          };\n        });\n      }).flat();\n      let artistSet = new Set();\n      const filteredArtists = [];\n      for (const artist of artists) {\n        if (!artistSet.has(artist.artistName)) {\n          artistSet.add(artist.artistName);\n          filteredArtists.push(artist);\n        }\n      }\n      const playlistImg = playlist.images[0];\n      const playlistUrl = playlist.external_urls.spotify;\n      return {\n        imageUrl: playlistImg.url,\n        playlistUrl: playlistUrl,\n        artists: filteredArtists\n      };\n    })).then(data => {\n      //song data\n      return data;\n    });\n  } //end get getParsedPlaylistData\n\n  const numPlaylists = 3;\n  const url = `https://api.spotify.com/v1/users/simonlhopkins/playlists?limit=${numPlaylists}`;\n  //get the parsed data\n  return fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Authorization\": `Bearer ${token}`\n    }\n  }).then(response => response.json()).then(async data => {\n    const parsedData = await getParsedPlaylistData(data, token);\n    localStorage.setItem(\"cachedPlaylistData\", JSON.stringify(parsedData));\n    return parsedData;\n  }).catch(error => console.error('Error:', error));\n}\nfunction PlaylistContainer() {\n  _s();\n  const [accessToken, setAccessToken] = useState('');\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(null);\n  async function getAccessToken() {\n    const data = new URLSearchParams();\n    data.append(\"grant_type\", \"client_credentials\");\n    // data.append(\"client_id\", client_id);\n    // data.append(\"client_secret\", client_secret);\n    return fetch(\"https://accounts.spotify.com/api/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: data\n    }).then(response => {\n      console.log(response);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => data.access_token).catch(error => {\n      console.log(\"ERRORR\");\n      throw error;\n    });\n  }\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const token = await getAccessToken();\n        console.log(token);\n        setAccessToken(token);\n        const data = await getPlaylistData(token, true);\n        setData(data);\n      } catch (error) {\n        console.log(\"ERROR\");\n        setError(error);\n        return;\n      }\n    };\n    fetchData();\n  }, []);\n  const children = data.map((playlistsData, index) => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(PlaylistEntry, {\n        imageUrl: playlistsData.imageUrl,\n        artists: playlistsData.artists,\n        playlistUrl: playlistsData.playlistUrl\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true);\n  });\n  console.log(\"render playlist container\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 9\n  }, this);\n}\n_s(PlaylistContainer, \"wy8tsdthGPF6t7EyD82ES+adbPQ=\");\n_c = PlaylistContainer;\nexport default PlaylistContainer;\nvar _c;\n$RefreshReg$(_c, \"PlaylistContainer\");","map":{"version":3,"names":["useEffect","useState","PlaylistEntry","jsxDEV","_jsxDEV","Fragment","_Fragment","client_id","client_secret","getPlaylistData","token","isNewToken","localStorage","getItem","JSON","parse","console","log","getParsedPlaylistData","playlistsData","authToken","Promise","all","items","map","playlist","tracks","fetch","href","method","headers","then","response","json","data","track","artists","artistName","name","artistUrl","external_urls","spotify","flat","artistSet","Set","filteredArtists","artist","has","add","push","playlistImg","images","playlistUrl","imageUrl","url","numPlaylists","parsedData","setItem","stringify","catch","error","PlaylistContainer","_s","accessToken","setAccessToken","setData","setError","getAccessToken","URLSearchParams","append","body","ok","Error","status","access_token","fetchData","children","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/simonhopkins/Desktop/Personal/react/music-i-listen-to/src/PlaylistContainer.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport PlaylistEntry from \"./PlaylistEntry\";\n\n\nconst client_id = '1b352e5ba35049b1918e0b310494107e';\nconst client_secret = 'b79d65aa4cca4e389c38ad01497bb981';\n\n\n\nasync function getPlaylistData(token, isNewToken) {\n    if (localStorage.getItem(\"cachedPlaylistData\") && !isNewToken) {\n      return JSON.parse(localStorage.getItem(\"cachedPlaylistData\"));\n    }\n    console.log(\"fetching new playlist data\");\n    async function getParsedPlaylistData(playlistsData, authToken) {\n  \n      return Promise.all(playlistsData.items.map(async (playlist) => {\n        //get tracks\n        const tracks = await fetch(playlist.tracks.href, {\n          method: \"GET\",\n          headers: {\n            \"Authorization\": `Bearer ${authToken}`\n          }\n        })\n        .then(response => response.json())\n        .then(data => {\n          return data.items.map(track => track.track);\n        })\n        const artists = tracks.map((track) => {\n          return track.artists.map(artists => {\n            return{\n              artistName: artists.name,\n              artistUrl: artists.external_urls.spotify\n            }\n          });\n        }).flat();\n        let artistSet = new Set();\n        const filteredArtists = [];\n        for(const artist of artists){\n          if(!artistSet.has(artist.artistName)){\n            artistSet.add(artist.artistName);\n            filteredArtists.push(artist);\n          }\n        }\n  \n        const playlistImg = playlist.images[0];\n        const playlistUrl = playlist.external_urls.spotify;\n        return {\n          imageUrl: playlistImg.url,\n          playlistUrl: playlistUrl,\n          artists: filteredArtists\n        };\n      })).then(data => {\n        //song data\n        return data;\n      });\n    } //end get getParsedPlaylistData\n    \n    const numPlaylists = 3;\n    const url = `https://api.spotify.com/v1/users/simonlhopkins/playlists?limit=${numPlaylists}`;\n    //get the parsed data\n    return fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    })\n    .then(response => response.json())\n    .then(async (data) => {\n      const parsedData = await getParsedPlaylistData(data, token);\n      localStorage.setItem(\"cachedPlaylistData\", JSON.stringify(parsedData));\n      return parsedData;\n    })\n    .catch(error => console.error('Error:', error));\n  }\n\nfunction PlaylistContainer(){\n    const [accessToken, setAccessToken] = useState('');\n    const [data, setData] = useState([]);\n    const [error, setError] = useState(null);\n\n    async function getAccessToken() {\n        const data = new URLSearchParams();\n        data.append(\"grant_type\", \"client_credentials\");\n        // data.append(\"client_id\", client_id);\n        // data.append(\"client_secret\", client_secret);\n        return fetch(\"https://accounts.spotify.com/api/token\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          },\n          body: data\n      \n        }).then(response => {\n            console.log(response);\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(data => data.access_token)\n        .catch(error => {\n            console.log(\"ERRORR\");\n            throw error;\n        });\n    \n    }\n\n    useEffect(()=>{\n        const fetchData = async ()=>{\n            try{\n                const token = await getAccessToken();\n                console.log(token);\n                setAccessToken(token);\n                const data = await getPlaylistData(token, true);\n                setData(data);\n            }\n            catch(error){\n                console.log(\"ERROR\");\n                setError(error);\n                return;\n            }\n            \n        }\n        fetchData();\n    }, [])\n\n    \n    const children = data.map((playlistsData, index)=>{\n        return (\n            <>\n            <PlaylistEntry \n            key = {index}\n            imageUrl = {playlistsData.imageUrl}\n            artists = {playlistsData.artists}\n            playlistUrl = {playlistsData.playlistUrl} \n            />\n            {error && <p>Error: {error}</p>}\n            </>\n        )\n    });\n\n    console.log(\"render playlist container\");\n    return(\n        <div>\n            {children}\n        </div>\n    )\n}\n\nexport default PlaylistContainer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}